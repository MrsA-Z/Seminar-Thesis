
Monographien
@Book{tannenbaum,
author={Andrew S. Tannenbaum and Maarten Van Steen},
title={{D}istributed {S}ystems - {P}rinciples and {P}aradigms},
year={2007},
edition={2nd edition},
publisher={Pearson Prentice Hall},
address={New Jersey},
}


fuer online quellen booklet verwenden
@Booklet{OWL,
author={Deborah L. McGuinness and Frank van Harmelen},
year={2005},
title={{OWL} {W}eb {O}ntology {L}anguage},
lastchecked={5.5.2005},
url={http://www.w3.org/2004/OWL/\#specs},
}

@Booklet{karlskrona,
author = {Akinli-Kocack, Sedef and Becker, Christoph and Betz, Stefanie and Calero, Coral and Chitchyan, Ruzanna and Duboc, Leticia and Easterbrook, Steve M. and Mahaux, Martin and Penzenstadler, Birgit and Rodriguez-Navas, Guillermo and Salinesi, Camille and  Seyff, Norbert and Venters, Colin C.},
year = {2015},
title = {The Karlskrona Manifesto for Sustainability Design},
lastchecked = {23.04.2017},
url = {http://sustainabilitydesign.org/karlskrona-manifesto/},
}

@Booklet{smart2020,
author={{The Climate Group}},
year={2008},
title={{SMART} 2020: Enabling the low carbon economy in the information age},
lastchecked={22.4.2017},
url={http://gesi.org/files/Reports/Smart%202020%20report%20in%20English.pdf},
}

@Booklet{gartner07,
author={Simon Mingay},
year={2007},
title={{GREEN} IT: A New Industry Shock Wave},
lastchecked={22.4.2017},
url={http://www.ictliteracy.info/rf.pdf/Gartner_on_Green_IT.pdf},
}

@Booklet{UN_transform_15,
author={{United Nations}},
year={2015},
title={Transforming our world: the 2030 Agenda for Sustainable Development},
howpublished={New York},
lastchecked={22.04.2017},
url={http://www.un.org/ga/search/view_doc.asp?symbol=A/RES/70/1&Lang=E},
}

Artikel aus Fachzeitschriften

@misc{hilty11,
	title = {Sustainability and {ICT} – {An} overview of the field},
	author = {Hilty, Lorenz M. and Lohmann, Wolfgang and Huang, Elaine M.},
	year = {2011},
	url = {https://www.researchgate.net/publication/228096229_Sustainability_and_ICT_-_An_overview_of_the_field},
	urldate = {2017-04-22},
	volume = {XXXVII},
	number = {104},
	pages = {13--28},
	journal = {notizie di POLITEIA},
}


@article{gladwin_shifting_1995,
	title = {Shifting paradigms for sustainable development: {Implications} for management theory and research},
	volume = {20},
	shorttitle = {Shifting paradigms for sustainable development},
	url = {http://amr.aom.org/content/20/4/874.short},
	number = {4},
	urldate = {2017-04-21},
	journal = {Academy of management Review},
	author = {Gladwin, Thomas N. and Kennelly, James J. and Krause, Tara-Shelomith},
	year = {1995},
	pages = {874--907}
}

@article{jamieson_sustainability_1998,
	title = {Sustainability and beyond},
	volume = {24},
	url = {http://www.sciencedirect.com/science/article/pii/S0921800997001420},
	number = {2},
	urldate = {2017-04-21},
	journal = {Ecological Economics},
	author = {Jamieson, Dale},
	year = {1998},
	pages = {183--192}
}

Sammelbaende. Vorsicht, immer *number* verwenden, nicht *volume*
@Incollection{COMITY,
title = {{C}{O}{M}{I}{T}{Y} - {C}onflict {A}voidance in {P}ervasive {C}omputing {E}nvironments.},
author = {Verena Tuttlies and Gregor Schiele and Christian Becker},
booktitle = {OTM Workshops (2007)},
editor = {Robert Meersman and Zahir Tari and Pilar Herrero},
pages = {763-772},
publisher = {Springer},
series = {Lecture Notes in Computer Science},
number = {4806},
year = {2007},
address = {Heidelberg}
} 

Hochschulschriften, dissertation
@phdthesis{schulze_cost_2016,
	address = {Mannheim},
	title = {A {Cost} model for {Expressing} and {Estimating} {Ecological} {Costs} of {Software}-{Driven} {Systems}},
	school = {Universität Mannheim},
	author = {Schulze, Thomas},
	year = {2016},
}

Hochschulschriften, default ist masters thesis
@mastersthesis{master,
author={C. Welscher},
year={2001},
title={{I}ndigene {V}ölker im {G}ebiet {T}jumén ({W}estsibirien): {Z}iele, {S}ituation und zielorientierte
{A}ktivitäten},
school={Institut für Friedenssicherungsrecht und humanitäres Völkerrecht,
Ruhr-Universität Bochum},
}

Hochschulschriften, type angeben (Habil., Diss.,...)
@mastersthesis{habil,
type={Fast eine Habil.},
author={C. Welscher},
year={2001},
title={{I}ndigene {V}ölker im {G}ebiet {T}jumén ({W}estsibirien): {Z}iele, {S}ituation und zielorientierte
{A}ktivitäten},
school={Institut für Friedenssicherungsrecht und humanitäres Völkerrecht,
Ruhr-Universität Bochum},
}

@mastersthesis{buchner_sust_16,
type={Seminar Paper},
author = {Natalie Buchner},
year = {2016},
title = {Understanding Sustainable Software - Of Impacts and Development Models},
school = {School of Economics and Management, Lund University, Sweden},
}

@misc{nino_sustainable_2017,
	title = {Sustainable development goals - {United} {Nations}},
	url = {http://www.un.org/sustainabledevelopment/sustainable-development-goals/},
	abstract = {Full list of the 17 proposed sustainable development goals and summaries of their targets},
	urldate = {2017-04-21},
	journal = {United Nations Sustainable Development},
	author = {Nino, Florencia Soto},
	year = {2017}
}

@techreport{Brundtland1987,
  author = {on Environment, World Commission and Development},
  institution = {United Nations},
  title = {Our Common Future},
  type = {also: Brundtland Report},
  url = {http://www.un-documents.net/wced-ocf.htm},
	urldate = {2017-04-22},
  year = 1987
}


@misc{penzenstadler_what_13,
	title = {What does {Sustainability} mean in and for {Software} {Engineering}? ({PDF} {Download} {Available})},
	shorttitle = {What does {Sustainability} mean in and for {Software} {Engineering}?},
	url = {https://www.researchgate.net/publication/255949741_What_does_Sustainability_mean_in_and_for_Software_Engineering},
	author = {Penzenstadler, Birgit},
	urldate = {2017-04-23},
	year = {2013},
	journal = {1st International Conference on ICT for Sustainability (ICT4S},
}


@article{naumann_how_2008,
	title = {How green is the web? {Visualizing} the power quality of websites},
	shorttitle = {How green is the web?},
	url = {http://enviroinfo.eu/sites/default/files/pdfs/vol119/0062.pdf},
	urldate = {2017-04-23},
	journal = {EnviroInfo},
	author = {Naumann, Stefan and Gresk, Sascha and Schäfer, Kerstin},
	year = {2008},
	pages = {62--65},
}


@inproceedings{betz_sustainable_2014,
	title = {Sustainable {Software} {System} {Engineering}},
	doi = {10.1109/BDCloud.2014.113},
	booktitle = {Cloud {Computing}},
	author = {Betz, Stefanie and Caporale, Timm},
	month = dec,
	year = {2014},
	keywords = {business process management, business process modeling, business requirements, function model, goal driven software development process, knowledge management, management science, measurement, organization, package development process, personal software process, product service system, social software engineering, software construction, software deployment, software development, software development process, software engineering process group, software requirements, software system, software walkthrough, sustainability, sustainability organizations, systems development life cycle, systems modeling, verification and validation}
}

@article{capra_is_2012,
	title = {Is software “green”? {Application} development environments and energy efficiency in open source applications},
	volume = {54},
	shorttitle = {Is software “green”?},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584911001777},
	number = {1},
	urldate = {2017-04-23},
	journal = {Information and Software Technology},
	author = {Capra, Eugenio and Francalanci, Chiara and Slaughter, Sandra A.},
	year = {2012},
	pages = {60--71},
}

@article{agarwal_sustainable_2012,
	title = {Sustainable approaches and good practices in green software engineering},
	volume = {3},
	url = {https://www.researchgate.net/profile/Asoke_Nath/publication/266052297_Sustainable_Approaches_and_Good_Practices_in_Green_Software_Engineering/links/5516ce390cf2f7d80a39add8.pdf},
	number = {1},
	urldate = {2017-04-23},
	journal = {International Journal of Research and Reviews in Computer Science (IJRRCS)},
	author = {Agarwal, Shalabh and Nath, Asoke and Chowdhury, Dipayan},
	year = {2012},
}

@article{kern_impacts_2015,
	series = {Information technology and renewable energy - {Modelling}, simulation, decision support and environmental assessment},
	title = {Impacts of software and its engineering on the carbon footprint of {ICT}},
	volume = {52},
	issn = {0195-9255},
	url = {http://www.sciencedirect.com/science/article/pii/S0195925514000687},
	doi = {10.1016/j.eiar.2014.07.003},
	urldate = {2017-04-23},
	journal = {Environmental Impact Assessment Review},
	author = {Kern, Eva and Dick, Markus and Naumann, Stefan and Hiller, Tim},
	month = apr,
	year = {2015},
	keywords = {carbon footprint, Energy efficiency measurements, green software development},
	pages = {53--61},
}

@article{berkhout_impacts_2001,
	title = {Impacts of information and communication technologies on environmental sustainability: {Speculations} and evidence},
	volume = {21},
	shorttitle = {Impacts of information and communication technologies on environmental sustainability},
	url = {http://www.ictliteracy.info/rf.pdf/OECD-ICT-EnvrnmtImpct.pdf},
	urldate = {2017-04-23},
	journal = {Report to the OECD, Brighton},
	author = {Berkhout, Frans and Hertin, Julia},
	year = {2001}
}

@inproceedings{shenoy_green_2011,
	title = {Green software development model: {An} approach towards sustainable software development},
	shorttitle = {Green software development model},
	doi = {10.1109/INDCON.2011.6139638},
	abstract = {The Software development lifecycle (SDLC) currently focuses on systematic execution and maintenance of software by dividing the software development process into various phases that include requirements-gathering, design, implementation, testing, deployment and maintenance. The problem here is that certain important decisions taken in these phases like use of paper, generation of e-Waste, power consumption and increased carbon foot print by means of travel, Air-conditioning etc may harm the environment directly or indirectly. There is a dearth of models that define how a software can be developed and maintained in an environment friendly way. This paper discusses the changes in the existing SDLC and suggests appropriate steps which can lead to lower carbon emissions, power and paper use, thus helping organizations to move towards greener and sustainable software development.},
	booktitle = {2011 {Annual} {IEEE} {India} {Conference}},
	author = {Shenoy, S. S. and Eeratta, R.},
	month = dec,
	year = {2011},
	keywords = {carbon emission, Computers, environmental factors, green software development model, Hardware, Maintenance engineering, paper use, Power demand, power use, Programming, program testing, software deployment phase, software design phase, software development lifecycle, software gathering phase, software implementation phase, software maintenance, software maintenance phase, Software systems, software testing phase, sustainable software development},
	pages = {1--6},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\R6EFGAIJ\\6139638.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\XXMFG9JJ\\Shenoy und Eeratta - 2011 - Green software development model An approach towa.pdf:application/pdf}
}

@incollection{dick_model_2010,
	title = {A {Model} and {Selected} {Instances} of {Green} and {Sustainable} {Software}},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-15479-9_24},
	abstract = {The power consumption of ICT is still increasing. To date it is not clear if the energy savings through ICT overbalance the energy consumption by ICT or not. Where manifold efforts of Green IT address the environmental aspects of sustainability considering computer hardware, there is a lack of models, descriptions, or realizations in the area of computer software. In this paper we present some results that form the basis towards a definition of the term ”Sustainable Software”, an outline of a process and lifecycle model for ”Green and Sustainable Software Engineering”, and six concrete instances of this model for practitioners.},
	language = {en},
	urldate = {2017-02-07},
	booktitle = {What {Kind} of {Information} {Society}? {Governance}, {Virtuality}, {Surveillance}, {Sustainability}, {Resilience}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Dick, Markus and Naumann, Stefan and Kuhn, Norbert},
	year = {2010},
	note = {DOI: 10.1007/978-3-642-15479-9\_24},
	pages = {248--259},
	file = {Full Text PDF:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\WDP844ZP\\Dick et al. - 2010 - A Model and Selected Instances of Green and Sustai.pdf:application/pdf;Snapshot:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\EPZ5FIFX\\978-3-642-15479-9_24.html:text/html}
}

@book{mahmoud_green_2013,
	title = {A {Green} {Model} for {Sustainable} {Software} {Engineering}},
	abstract = {Information Communication Technology (ICT) has a strong impact on sustainable development due its rising demands for energy and resources needed when building hardware and software products. Most of the efforts spent on Green ICT/IT have been dedicated to addressing the effects of hardware on the environment but little have been considering the effects of building software products as well. Efficient software will indirectly consume less energy by using up less hardware equipment to run. Our contributions in this paper are devoted to building a two level green software model that covers the sustainable life cycle of a software product and the software tools promoting green and environmentally sustainable software. In the first level we propose a new green software engineering process that is a hybrid process between sequential, iterative, and agile development processes to produce an environmentally sustainable one. Each stage of the software process is then further studied to produce a green and sustainable stage. We propose either green guidelines or green processes for each software stage in the engineering process. We add to the software life cycle the requirements stage and the testing stage. We also include in the first level a complete list of metrics to measure the greenness of each stage in terms of the first order effects of ICT on the environment for a green software engineering process. No effort has been placed before in designing a green software engineering process. The second level explains how software itself can be used as a tool to aid in green computing by monitoring resources in an energy efficient manner. Finally, we show and explain relationships that can be found between the two levels in our proposed model to make the software engineering process and product green and sustainable.},
	author = {Mahmoud, Sara S. and Ahmad, Imtiaz},
	month = jan,
	year = {2013},
	keywords = {empirical process, engineering, goal driven software development process, operations management, package development process, resource oriented architecture, social software engineering, software construction, software deployment, software development, software development process, software engineering process group, software quality management, software requirements, software sizing, systems engineering, team software process}
}

@article{penzenstadler_safety_2014,
	title = {Safety, {Security}, {Now} {Sustainability}: {The} {Nonfunctional} {Requirement} for the 21st {Century}},
	volume = {31},
	shorttitle = {Safety, {Security}, {Now} {Sustainability}},
	doi = {10.1109/MS.2014.22},
	abstract = {Many software systems today control large-scale sociotechnical systems. These systems aren't just entangled with the environment but also with our dwindling resources and mostly unsustainable way of living, while the planet's population continues to grow. Dealing with sustainability requirements and systematically supporting their elicitation, analysis, and realization is a problem that has yet to be solved. Decades ago, the discipline of software engineering dealt with similar shortcomings in its processes by including safety and security as new system qualities. In light of the increasing consequences of inadequately addressing sustainability in developing software systems, software engineers must apply the lessons learned from these prior research efforts and identify the necessary research agenda. Considering sustainability in software engineering means more than energy efficiency and green IT, which are concerned with the first-order impacts of software systems. Software engineers must also take into account the second- and third-order impacts in the system context, even if they're hard to assess. By doing so, engineers have the potential to considerably improve civilization's sustainability. The Web extra at http://youtu.be/VC07j6a1XUw is a video in which author Birgit Penzenstadler talks about how software engineers can considerably improve civilization's sustainability by taking into account not just the first-order impacts of software systems but also their second- and third-order impacts.},
	number = {3},
	journal = {IEEE Software},
	author = {Penzenstadler, Birgit and Raturi, Ankita and Richardson, Debra J. and Tomlinson, Bill},
	month = may,
	year = {2014},
	keywords = {engineering, non functional requirement, personal software process, reliability engineering, requirements engineering, resource oriented architecture, social software engineering, software deployment, software development, Software engineering, software engineering process group, software requirements, software security assurance, software system, software walkthrough, sustainability, systems engineering, verification and validation},
	pages = {40--47}
}

@book{raturi_developing_2014,
	title = {Developing a sustainability non-functional requirements framework},
	abstract = {Requirements engineers are in a unique position to encourage the consideration of sustainability at a formative phase in the software development life cycle. In this paper, we look at how we can develop sustainability as a non-functional requirement (NFR). We describe an NFR framework that is informed by sustainability models and discuss how it can be used to appropriately elicit and describe sustainability related requirements of the software system to be developed. We outline a roadmap for how we may integrate sustain- ability in requirements engineering from a theoretical NFR framework to an applicable software quality and relevant software standards.},
	author = {Raturi, Ankita and Penzenstadler, Birgit and Tomlinson, Bill and Richardson, Debra J.},
	month = jun,
	year = {2014},
	keywords = {engineering, environmental resource management, knowledge management, sustainability organizations, systems engineering}
}

@inproceedings{becker_sustainability_2015,
	title = {Sustainability design and software: the karlskrona manifesto},
	shorttitle = {Sustainability design and software},
	doi = {10.1109/ICSE.2015.179},
	abstract = {Sustainability has emerged as a broad concern for society. Many engineering disciplines have been grappling with challenges in how we sustain technical, social and ecological systems. In the software engineering community, for example, maintainability has been a concern for a long time. But too often, these issues are treated in isolation from one another. Misperceptions among practitioners and research communities persist, rooted in a lack of coherent understanding of sustainability, and how it relates to software systems research and practice. This article presents a cross-disciplinary initiative to create a common ground and a point of reference for the global community of research and practice in software and sustainability, to be used for effectively communicating key issues, goals, values and principles of sustainability design for software-intensive systems. The centrepiece of this effort is the  Karlskrona Manifesto for Sustainability Design , a vehicle for a much needed conversation about sustainability within and beyond the software community, and an articulation of the fundamental principles underpinning design choices that affect sustainability. We describe the motivation for developing this manifesto, including some considerations of the genre of the manifesto as well as the dynamics of its creation. We illustrate the collaborative reflective writing process and present the current edition of the manifesto itself. We assess immediate implications and applications of the articulated principles, compare these to current practice, and suggest future steps.},
	booktitle = {International {Conference} on {Software} {Engineering}},
	author = {Becker, Christoph and Chitchyan, Ruzanna and Duboc, Leticia and Easterbrook, Steve M. and Penzenstadler, Birgit and Seyff, Norbert and Venters, Colin C.},
	month = may,
	year = {2015},
	keywords = {ecological systems theory, engineering, knowledge management, management, management science, Software engineering, sustainability, sustainability organizations, sustainable design, systems engineering}
}

@inproceedings{johann_sustainable_2011,
	title = {Sustainable development, sustainable software, and sustainable software engineering: {An} integrated approach},
	shorttitle = {Sustainable development, sustainable software, and sustainable software engineering},
	abstract = {Sustainability is a keyword in the 21th century. It gains importance in all industry sectors, in politics and in public perception. In our paper we give an overview of our research in the field of sustainability in computer science. We focus on software and the development of software. Therefore we make a proposal for a life cycle model which helps to develop green and sustainable software products. In addition we present concrete realizations to support stakeholders involved in the software products' life cycle.},
	booktitle = {Humanities, {Science} \& {Engineering} {Research} ({SHUSER}), 2011 {Symposium}},
	publisher = {IEEE},
	author = {Johann, Timo and Dick, Markus and Kern, Eva and Naumann, Stefan},
	month = jun,
	year = {2011},
	keywords = {engineering, environmental resource management, operations management, social software engineering, software development, software development process, software engineering process group, software quality management, systems engineering, team software process}
}

@inproceedings{amsel_toward_2011,
	title = {Toward sustainable software engineering ({NIER} track)},
	doi = {10.1145/1985793.1985964},
	abstract = {Current software engineering practices have significant effects on the environment. Examples include e-waste from computers made obsolete due to software upgrades, and changes in the power demands of new versions of software. Sustainable software engineering aims to create reliable, long-lasting software that meets the needs of users while reducing environmental impacts. We conducted three related research efforts to explore this area. First, we investigated the extent to which users thought about the environmental impact of their software usage. Second, we created a tool called GreenTracker, which measures the energy consumption of software in order to raise awareness about the environmental impact of software usage. Finally, we explored the indirect environmental effects of software in order to understand how software affects sustainability beyond its own power consumption. The relationship between environmental sustainability and software engineering is complex; understanding both direct and indirect effects is critical to helping humans live more sustainably.},
	booktitle = {International {Conference} on {Software} {Engineering}},
	author = {Amsel, Nadine and Ibrahim, Zaid and Malik, Amir and Tomlinson, Bill},
	month = may,
	year = {2011},
	keywords = {engineering, personal software process, social software engineering, software deployment, software development, Software engineering, software engineering process group, software quality management, sustainability, systems engineering}
}

@book{venters_software_2014,
	title = {Software {Sustainability}: {The} {Modern} {Tower} of {Babel}},
	shorttitle = {Software {Sustainability}},
	abstract = {The development of sustainable software has been identified as one of the key challenges in the field of computational science and engineering. However, there is currently no agreed definition of the concept. Current definitions range from a composite, non-functional requirement to simply an emergent property. This lack of clarity leads to confusion, and potentially to ineffective and inefficient efforts to develop sustainable software systems. The aim of this paper is to explore the emerging definitions of software sustainability from the field of software engineering in order to contribute to the question, what is software sustainability? The preliminary analysis suggests that the concept of software sustainability is complex and multifaceted with any consensus towards a shared definition within the field of software engineering yet to be achieved.},
	author = {Venters, Colin C. and Jay, Caroline and Lau, Lydia and Griffiths, Michael K. and Holmes, Violeta and Ward, Rupert and Austin, Jim and Dibsdale, Charlie and Xu, Jie},
	month = nov,
	year = {2014},
	keywords = {engineering, knowledge management, management science, social software engineering, software design, software design description, software development, software engineering process group, software metric, software quality management, software requirements, software walkthrough, systems engineering}
}

@inproceedings{zhu_programming_2015,
	title = {A programming model for sustainable software},
	doi = {10.1109/ICSE.2015.89},
	abstract = {This paper presents a novel energy-aware and temperature-aware programming model with first-class support for  sustainability.  A program written in the new language, named Eco, may adaptively adjusts its own behaviors to stay on a given (energy or temperature) budget, avoiding both deficit that would lead to battery drain or CPU overheating, and surplus that could have been used to improve the quality of results. Sustainability management in Eco is captured as a form of supply and demand matching, and the language runtime consistently maintains the equilibrium between supply and demand. Among the efforts of energy-adaptive and temperature-adaptive systems, Eco is distinctive in its role in bridging the programmer and the underlying system, and in particular, bringing both programmer knowledge and application-specific traits into energy optimization. Through a number of intuitive programming abstractions, Eco reduces challenging issues in this domain --- such as workload characterization and decision making in adaptation --- to simple programming tasks, ultimately offering fine-grained, programmable, and declarative sustainability to energy-efficient computing. Eco is an minimal extension to Java, and has been implemented as an open-source compiler. We validate the usefulness of Eco by upgrading real-world Java applications with energy awareness and temperature awareness.},
	booktitle = {International {Conference} on {Software} {Engineering}},
	author = {Zhu, Haitao Steve and Lin, Chaoren and Liu, Yu David},
	month = may,
	year = {2015},
	keywords = {calibration, Computer Science, energy management, java, management, operating system, Programming, programming language, programming paradigm, real time computing, simulation, Software engineering, sustainability, systems engineering, teamwork, thermal management of electronic devices and systems}
}

@book{penzenstadler_generic_2013,
	title = {A generic model for sustainability with process- and product-specific instances},
	abstract = {Motivation: Software systems as we know them often have a economic purpose and/or fulfill human or social needs of their users. The economic purpose is analysed by economy itself; the latter goals are analysed in software engineering by user-centric techniques, such as service orientation. Yet, as software systems have an impact on the environment, environmental sustainability should be supported as a major goal for software development projects.   Problem: Without applicable guidance, sustainability remains an untangible ideal. Therefore, we need a definition and a concrete decomposition of sustainability to relate it to software systems development. It is not sufficient to analyse environmental sustainbility on its own, but its interplay with other aspects in order to define appropriate actions and understand their effects.   Principal idea: We analyse the dimensions of sustainability, their values with respective indicators, and activities to support them. These elements compose a conceptual model that allows for analysing and constructing actions both for a company or a product point of view.   Contribution: We propose a generic sustainability model with instances for companies and projects from various case studies. We thus enable analysis, support and assessment of environmental sustainability in software engineering.},
	author = {Penzenstadler, Birgit and Femmer, Henning},
	month = mar,
	year = {2013},
	keywords = {engineering, knowledge management, management science, software development, sustainability organizations, systems engineering}
}

@article{naumann_greensoft_2011,
	title = {The {GREENSOFT} {Model}: {A} reference model for green and sustainable software and its engineering},
	volume = {1},
	issn = {2210-5379},
	shorttitle = {The {GREENSOFT} {Model}},
	url = {https://www.sciencedirect.com/science/article/pii/S2210537911000473},
	doi = {10.1016/j.suscom.2011.06.004},
	abstract = {The resource and power consumption of ICT is still increasing, but also the benefits of ICT, e.g. in finding more efficient solutions for environmental problems. To date, it is not clear, whether the resource and energy savings through ICT overbalance the resource and energy consumption by ICT, or not. Up to now, manifold efforts of Green IT address the environmental aspects of sustainability considering computer hardware. However, there is still a lack of models, descriptions or realizations in the area of computer software and software process models. In our contribution, we first propose definitions of the terms “Green and Sustainable Software” and “Green and Sustainable Software Engineering”, then we outline a conceptual reference model, the GREENSOFT Model. This model includes a cradle-to-grave product life cycle model for software products, sustainability metrics and criteria for software, software engineering extensions for sustainably sound software design and development, as well as appropriate guidance.},
	number = {4},
	urldate = {2017-02-07},
	journal = {Sustainable Computing: Informatics and Systems},
	author = {Naumann, Stefan and Dick, Markus and Kern, Eva and Johann, Timo},
	month = dec,
	year = {2011},
	keywords = {Green by IT, Green IT, GREENSOFT Reference Model, Green Software, Software engineering},
	pages = {294--304},
	file = {ScienceDirect Full Text PDF:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\FUHZFSCB\\Naumann et al. - 2011 - The GREENSOFT Model A reference model for green a.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\HWU6F4BD\\S2210537911000473.html:text/html}
}

@inproceedings{johann_how_2012,
	address = {Piscataway, NJ, USA},
	series = {{GREENS} '12},
	title = {How to {Measure} {Energy}-efficiency of {Software}: {Metrics} and {Measurement} {Results}},
	isbn = {978-1-4673-1832-7},
	shorttitle = {How to {Measure} {Energy}-efficiency of {Software}},
	url = {http://dl.acm.org/citation.cfm?id=2663779.2663788},
	abstract = {In the field of information and computer technology (ICT), saving energy has its focus set on energy efficient hardware and its operation. Recently, efforts have also been made in the area of computer software. However, the development of energy efficient software requires metrics, which measure the software's energy consumption as well as models to monitor and minimize it. In software and software development processes they hardly exist. In this work we present a generic metric to measure software and a method to apply it in a software engineering process.},
	urldate = {2017-02-08},
	booktitle = {Proceedings of the {First} {International} {Workshop} on {Green} and {Sustainable} {Software}},
	publisher = {IEEE Press},
	author = {Johann, Timo and Dick, Markus and Naumann, Stefan and Kern, Eva},
	year = {2012},
	keywords = {energy efficiency, Green Software, metrics},
	pages = {51--54},
	file = {ACM Full Text PDF:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\777F8VZ2\\Johann et al. - 2012 - How to Measure Energy-efficiency of Software Metr.pdf:application/pdf}
}


@article{capra_green_2009,
	title = {Green {IT}: {Everything} starts from the software},
	shorttitle = {Green {IT}},
	url = {http://aisel.aisnet.org/ecis2009/453},
	journal = {ECIS 2009 Proceedings},
	author = {Capra, Eugenio and Merlo, Francesco},
	month = jan,
	year = {2009}
	}
%Capra, Eugenio and Merlo, Francesco, "Green IT: Everything starts from the software" (2009). ECIS 2009 Proceedings. 453. 
%http://aisel.aisnet.org/ecis2009/453

@book{tate_sustainable_2005,
	address = {Upper Saddle River, NJ},
	series = {Safari {Books} {Online}},
	title = {Sustainable software development an agile perspective},
	isbn = {978-0-321-28608-6},
	url = {http://proquest.tech.safaribooksonline.de/0321286081},
	language = {eng},
	urldate = {2017-02-07},
	publisher = {Addison Wesley},
	author = {Tate, Kevin},
	year = {2005},
	keywords = {Computer software / Development}
}

@inproceedings{seacord_measuring_2003,
	title = {Measuring software sustainability},
	doi = {10.1109/ICSM.2003.1235455},
	abstract = {Planning and management of software sustainment is impaired by a lack of consistently applied, practical measures. Without these measures, it is impossible to determine the effect of efforts to improve sustainment practices. In this paper we provide a context for evaluating sustainability and discuss a set of measures developed at the Software Engineering Institute at Carnegie Mellon University.},
	booktitle = {International {Conference} on {Software} {Maintenance}, 2003. {ICSM} 2003. {Proceedings}.},
	author = {Seacord, R. C. and Elm, J. and Goethert, W. and Lewis, G. A. and Plakosh, D. and Robert, J. and Wrage, L. and Lindvall, M.},
	month = sep,
	year = {2003},
	keywords = {Carnegie Mellon University, program testing, Software Engineering Institute, software maintenance, Software measurement, software metrics, software process improvement, software reliability, software sustainability, software sustainment, sustainability evaluation, sustainment management, sustainment planning, sustainment practices improvement},
	pages = {450--459},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\H6S93U7W\\1235455.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\5MSWVU2S\\Seacord et al. - 2003 - Measuring software sustainability.pdf:application/pdf}
}

@inproceedings{penzenstadler_systematic_2014,
	address = {New York, NY, USA},
	series = {{EASE} '14},
	title = {Systematic {Mapping} {Study} on {Software} {Engineering} for {Sustainability} ({SE}4S)},
	isbn = {978-1-4503-2476-2},
	url = {http://doi.acm.org/10.1145/2601248.2601256},
	doi = {10.1145/2601248.2601256},
	abstract = {Background/Context: The objective of achieving higher sustainability in our lifestyles by information and communication technology has lead to a plethora of research activities in related fields. Consequently, Software Engineering for Sustainability (SE4S) has developed as an active area of research. Objective/Aim: Though SE4S gained much attention over the past few years and has resulted in a number of contributions, there is only one rigorous survey of the field. We follow up on this systematic mapping study from 2012 with a more in-depth overview of the status of research, as most work has been conducted in the last 4 years. Method: The applied method is a systematic mapping study through which we investigate which contributions were made, which knowledge areas are most explored, and which research type facets have been used, to distill a common understanding of the state-of-the-art in SE4S. Results: We contribute an overview of current research topics and trends, and their distribution according to the research type facet and the application domains. Furthermore, we aggregate the topics into clusters and list proposed and used methods, frameworks, and tools. Conclusion: The research map shows that impact currently is limited to few knowledge areas and there is need for a future roadmap to fill the gaps.},
	urldate = {2017-03-04},
	booktitle = {Proceedings of the 18th {International} {Conference} on {Evaluation} and {Assessment} in {Software} {Engineering}},
	publisher = {ACM},
	author = {Penzenstadler, Birgit and Raturi, Ankita and Richardson, Debra and Calero, Coral and Femmer, Henning and Franch, Xavier},
	year = {2014},
	keywords = {Software engineering, sustainability, systematic mapping study},
	pages = {14:1--14:14},
	file = {ACM Full Text PDF:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\BKUHKEU6\\Penzenstadler et al. - 2014 - Systematic Mapping Study on Software Engineering f.pdf:application/pdf}
}

@inproceedings{albertao_measuring_2010,
	title = {Measuring the {Sustainability} {Performance} of {Software} {Projects}},
	doi = {10.1109/ICEBE.2010.26},
	abstract = {Contrary to the common assumption that software is "environmentally friendly" simply because it is virtual, the processes and methods used to develop, maintain and deploy software do have an environmental and social impact that is normally not accounted for by software development practices. For example, e-waste could be greatly minimized if software vendors would take into consideration the lifetime of old hardware. Like so, software that is dependable minimizes waste of resources used to support the system. This paper introduces a set of software engineering metrics that can be used to assess the economic, social and environmental sustainability of software projects, and it demonstrates how these metrics were used to assess a real project.},
	booktitle = {2010 {IEEE} 7th {International} {Conference} on {E}-{Business} {Engineering}},
	author = {Albertao, F. and Xiao, J. and Tian, C. and Lu, Y. and Zhang, K. Q. and Liu, C.},
	month = nov,
	year = {2010},
	keywords = {Economics, economic sustainability assessment, environmental impact, environmental sustainability assessment, e-waste, Flexible printed circuits, Hardware, measurement, project management, resource waste, social impact, social sustainability assessment, software cost estimation, software development management, software development practice, Software engineering, software engineering metrics, software metrics, software project, software vendors, sustainability, sustainability performance, sustainable development, Testing, Usability},
	pages = {369--373},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\STJ6XUPQ\\5704342.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\UAIB4JK5\\Albertao et al. - 2010 - Measuring the Sustainability Performance of Softwa.pdf:application/pdf}
}

@article{penzenstadler_sustainability_2012,
	title = {Sustainability in software engineering: a systematic literature review},
	shorttitle = {Sustainability in software engineering},
	url = {http://digital-library.theiet.org/content/conferences/10.1049/ic.2012.0004},
	doi = {10.1049/ic.2012.0004},
	abstract = {Background: Supporting sustainability in software engineering is becoming an active area of research. We want to contribute the first Systematic Literature Review(SLR) in this field to aid researchers who are motivated to contribute to that topic by providing a body of knowledge as starting point, because we know from own experience, this search can be tedious and time consuming. Aim: We aim to provide an overview of different aspects of sustainability in software engineering research with regard to research activity, investigated topics, identified limitations, proposed approaches, used methods, available studies, and considered domains. Method: The applied method is a SLR in five reliable and commonly-used databases according to the (quasi-standard) protocol by Kitchenham et al. [1]. We assessed the 100 first results of each database ordered by relevance with respect to the search query. Results: Of 500 classified publications, we regard 96 as relevant for our research questions. We sketch a taxonomy of their topics and domains, and provide lists of used methods and proposed approaches. Most of the excluded publications were ruled out because of an unfitting usage of terms within the search query. Conclusions: Currently, there is little research coverage on the different aspects of sustainability in software engineering while other disciplines are already more active. Future work includes extending the study by reviewing a higher number of publications, including dedicated journal and workshop searches, and snowballing.},
	urldate = {2017-03-04},
	author = {Penzenstadler, B. and Bauer, V. and Calero, C. and Franch, X.},
	month = jan,
	year = {2012},
	pages = {32--41},
	file = {Penzenstadler - Sustainability in Software Engineering An SLR - 2012 .pdf:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\D5TDKNCI\\Penzenstadler - Sustainability in Software Engineering An SLR - 2012 .pdf:application/pdf;Snapshot:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\WH2JSV5R\\ic.2012.html:text/html}
}

@inproceedings{penzenstadler_supporting_2012,
	title = {Supporting sustainability aspects in software engineering},
	url = {https://pdfs.semanticscholar.org/e08c/442de8696c5e7c56d81c3ccd6f1498238169.pdf},
	urldate = {2017-03-04},
	booktitle = {3rd international conference on computational sustainability ({CompSust})},
	author = {Penzenstadler, Birgit},
	year = {2012},
	file = {[PDF] semanticscholar.org:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\UP5MRS6R\\Penzenstadler - 2012 - Supporting sustainability aspects in software engi.pdf:application/pdf}
}

@inproceedings{noureddine_preliminary_2012,
	title = {A preliminary study of the impact of software engineering on {GreenIT}},
	doi = {10.1109/GREENS.2012.6224251},
	abstract = {GreenIT has emerged as a discipline concerned with the optimization of software solutions with regards to their energy consumption. In this domain, most of state-of-the-art solutions offer limited or constraining approaches to monitor the energy consumption of a device or a process. In this paper, we therefore report on a runtime energy monitoring framework we developed to easily report on the energy consumption of system processes. Concretely, our approach adopts an OS-level library, called PowerAPI, which estimates the power consumption of processes according to different dimensions (CPU, network, etc.). In order to better understand potential energy leaks of legacy software, we use this library to study the impact of programming languages and algorithmic choices on the energy consumption. This preliminary study is based on an empirical evaluation of a eight implementations of the Towers of Hanoi problem.},
	booktitle = {2012 {First} {International} {Workshop} on {Green} and {Sustainable} {Software} ({GREENS})},
	author = {Noureddine, A. and Bourdon, A. and Rouvoy, R. and Seinturier, L.},
	month = jun,
	year = {2012},
	keywords = {algorithmic choices, Energy, energy consumption, energy leaks, environmental factors, Experimentation, GreenIT, Hanoi towers problem, Hardware, legacy software, Libraries, measurement, Monitoring, OS-level library, Performance, POWERAPI, power aware computing, Power demand, Power Model, programming languages, Program processors, runtime energy monitoring framework, Software engineering, software maintenance, software solutions optimization},
	pages = {21--27},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\6J2DVGJK\\6224251.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\I55CV4H8\\Noureddine et al. - 2012 - A preliminary study of the impact of software engi.pdf:application/pdf}
}

@book{calero_green_2015,
	title = {Green in {Software} {Engineering}},
	isbn = {978-3-319-08580-7},
	abstract = {This is the first book that presents a comprehensive overview of sustainability aspects in software engineering. Its format follows the structure of the SWEBOK and covers the key areas involved in the incorporation of green aspects in software engineering, encompassing topics from requirement elicitation to quality assurance and maintenance, while also considering professional practices and economic aspects.The book consists of thirteen chapters, which are structured in five parts. First the Introduction gives an overview of the primary general concepts related to Green IT, discussing what Green in Software Engineering is and how it differs from Green by Software Engineering.Next Environments, Processes and Construction presents green software development environments, green software engineering processes and green software construction in general. The third part, Economic and Other Qualities, details models for measuring how well software supports green software engineering techniques and for performing trade-off analyses between alternative green practices from an economic perspective. Software Development Process then details techniques for incorporating green aspects at various stages of software development, including requirements engineering, design, testing, and maintenance. In closing, Practical Issues addresses the repercussions of green software engineering on decision-making, stakeholder participation and innovation management.The audience for this book includes software engineering researchers in academia and industry seeking to understand the challenges and impact of green aspects in software engineering, as well as practitioners interested in learning about the state of the art in Green in Software Engineering.},
	publisher = {Springer Publishing Company, Incorporated},
	author = {Calero, Coral and Piattini, Mario},
	year = {2015},
	file = {green in software engineering.pdf:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\R8GND4SW\\green in software engineering.pdf:application/pdf}
}

@article{hilty_relevance_2006,
	title = {The relevance of information and communication technologies for environmental sustainability–a prospective simulation study},
	volume = {21},
	url = {http://www.sciencedirect.com/science/article/pii/S1364815206001204},
	number = {11},
	urldate = {2017-04-12},
	journal = {Environmental Modelling \& Software},
	author = {Hilty, Lorenz M. and Arnfalk, Peter and Erdmann, Lorenz and Goodman, James and Lehmann, Martin and Wäger, Patrick A.},
	year = {2006},
	pages = {1618--1629},
	file = {Snapshot:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\6VDJF6X9\\S1364815206001204.html:text/html}
}

@inproceedings{lami_software_2012,
	title = {Software {Sustainability} from a {Process}-{Centric} {Perspective}},
	url = {https://link.springer.com/chapter/10.1007/978-3-642-31199-4_9},
	doi = {10.1007/978-3-642-31199-4_9},
	abstract = {ICT significantly contributes to the global carbon dioxide production. In the last years the research addressed the problem of increasing ICT sustainability from different perspectives. In this paper this problem is addressed from a software process perspective. Sustainability of software process is approached in a systematic way by defining a core set of processes that represent the activities to be performed in order to introduce and integrate the greenness culture in an organization developing software. The processes have been defined so that they can be measured in terms of process capability according to the ISO/IEC 15504 standard. The relationships between process capability and sustainability are discussed as well.},
	language = {en},
	urldate = {2017-04-13},
	booktitle = {Systems, {Software} and {Services} {Process} {Improvement}},
	publisher = {Springer, Berlin, Heidelberg},
	author = {Lami, Giuseppe and Fabbrini, Fabrizio and Fusani, Mario},
	month = jun,
	year = {2012},
	pages = {97--108},
	file = {Snapshot:C\:\\Users\\D059184\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\b5flhmce.default\\zotero\\storage\\2SWN7A9B\\978-3-642-31199-4_9.html:text/html}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@misc{random,
type={Certificate},
author={Max Mustermann},
note={Currently under review},
year={2009},
title={Something that is not covered by any other annotation may be declared misc - certificates, patents and stuff like that}}

Liste der zulaessigen Felder

    address      %%  Verlagsort
    author       %%  persoenlicher Urheber eines Werkes
    booktitle    %%  a) Gesamttitel eines mehrbaendigen Werkes
%                %%  b) Titel des Sammelwerks, das einzelne selbstaendige
%                %%     Beitraege mit eigenem Titel enthaelt (->incollection)
    chapter      %%  Kapitel in einem Buch (Monographie)
    doi          %%% Digital Object Identifier
    edition      %%  Auflagevermerk; bei selbst. elektron. Dok. == Version
    editor       %%  Persoenl.Herausgeber oder Koerperschaftlicher Herausgeber
    howpublished %%  beliebiger Verlegervermerk: von wem, wo
    institution  %%  Institution, die e.Verlagsfreie Veroeffentlichung betreibt
    isbn         %%  Standardnr fuer Buecher
    issn         %%  -  -    :      Zeitschriften u. Serien
    journal      %%  Titel einer Zeitschrift
    key          %%  Zusaetzlich vergebener Sortierschluessel, mitunter notwend.
    lastchecked  %%  Online Abruf einer Internetquelle ( GRAY ); 22.1.2004
    month        %%  naehere Bestimmung des Erscheinungsjahres (-> macro 's)
    note         %%  freies Eingabefeld fuer zusaetzliche Informationen
    number       %%  Mehrfachbedeutung in Abhaengigkeit vom Eingabetyp
    organization %%  a) Name der Organisation/des Organisators e. Tagung,Konferenz
%                %%  b) Name einer Firma/Gesellschaft, die ein ->manual herausgab
    pages        %%  Umfangsangaben, meist Seitenzahlen
    publisher    %%  Verlag
    school       %%  Hochschule/Universitaet, die eine Dipl.-Arb./Dissertation veroeff.
    series       %%  Titel e.Reihe, in der ein best. Buchtitel erschienen ist
    title        %%  Titel einer (namentlich gekennzeichneten) Veroeffentlichung
    type         %%  Zusatzfeld z.Kennzeichnung e.besonderen Publikationstyps
    url          %%%  URL-Feld ( Uniform Resource Locator )
    urn          %%   URN-Feld ( Uniform Resource Name )
    volume       %%  a) Zaehlung bei einem mehrbaendigen Werk (-> book)
%                %%  b) Jahrgang einer Zeitschrift (-> article
    year         %%  Erscheinungsjahr
